---
import Layout from "@/layouts/Layout.astro";
import { URL_BASE } from "@/variables";
import Form from "@/sections/Form.astro";
import BackIcon from "@/icons/BackIcon.astro";
---

<Layout>
  <main
    id="main-container"
    class="min-h-screen flex flex-col overflow-clip transition-all duration-500 bg-ochre-influvac"
    style={`background-image: url('${URL_BASE}/img/bg/banner2.webp'); background-size: cover; background-position: center;`}
  >
    <header class="p-4 md:p-8">
      <div class="max-w-7xl mx-auto">
        <a href={URL_BASE}>
          <img
            id="dynamic-logo"
            class="w-52 h-auto"
            src={`${URL_BASE}/img/logoabbott_white.webp`}
            alt="Logo de Abbott"
            data-white-logo={`${URL_BASE}/img/logoabbott_white.webp`}
            data-color-logo={`${URL_BASE}/img/logoabbott_color.webp`}
          />
        </a>
      </div>
    </header>

    <!-- Contenedor de vistas -->
    <section class="w-6xl max-w-full mx-auto p-4 pb-10 flex-1">
      <!-- Vista 1: Formulario de Parámetros + Navegación -->
      <div id="view1" class="view-content active w-full flex items-center">
        <div class="flex gap-8 w-full">
          <!-- Formulario -->
          <div class="max-w-2xl">
            <Form />
          </div>

          <!-- Botones de navegación -->
          <div class="flex-1 flex items-center justify-center">
            <div class="flex flex-col gap-8">
              <button
                class="bg-blue-influvac font-bold text-3xl py-6 px-8 rounded-full text-white view-nav-btn transition-all duration-300 hover:bg-blue-influvac/90 hover:scale-105 shadow-lg cursor-pointer"
                data-view="view2"
                data-bg="banner3"
              >
                IMPACTO <br /> PRESUPUESTAL
              </button>
              <button
                class="bg-blue-influvac font-bold text-3xl py-6 px-8 rounded-full text-white view-nav-btn transition-all duration-300 hover:bg-blue-influvac/90 hover:scale-105 shadow-lg cursor-pointer"
                data-view="view3"
                data-bg="banner5"
              >
                COSTO - BENEFICIO <br /> COSTO - EFECTIVIDAD
              </button>
              <button
                class="bg-blue-influvac font-bold text-3xl py-6 px-8 rounded-full text-white view-nav-btn transition-all duration-300 hover:bg-blue-influvac/90 hover:scale-105 shadow-lg cursor-pointer"
                data-view="view4"
                data-bg="banner6"
              >
                CASOS <br /> DE INFLUENZA
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Vista 2: Impacto Presupuestal -->
      <div id="view2" class="view-content hidden w-full">
        <!-- Main Content Container -->
        <div class="max-w-3xl">
          <!-- Comparison Table -->
          <div class="bg-white rounded-lg shadow-lg overflow-hidden mb-6">
            <!-- Table Header -->
            <div
              class="grid grid-cols-3 bg-ochre-influvac text-white font-bold"
            >
              <div class="p-3"></div>
              <div class="p-3 text-center border-r border-ochre-influvac">
                NO VACUNAR
              </div>
              <div class="p-3 text-center">VACUNACIÓN TETRAVALENTE</div>
            </div>

            <!-- Table Rows -->
            <div class="divide-y divide-gray-200">
              <!-- Row 1 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Población Vacunada
                </div>
                <div class="p-3 text-center border-r border-gray-200">0</div>
                <div class="p-3 text-center">2000</div>
              </div>

              <!-- Row 2 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Porcentaje de vacunación
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  0,00%
                </div>
                <div class="p-3 text-center">40,00%</div>
              </div>

              <!-- Row 3 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Costo de la vacunación
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 0,00
                </div>
                <div class="p-3 text-center">$ 110.000.000</div>
              </div>

              <!-- Row 4 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Empleados con incapacidad médica
                </div>
                <div class="p-3 text-center border-r border-gray-200">408</div>
                <div class="p-3 text-center">140</div>
              </div>

              <!-- Row 5 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Días de incapacidad médica
                </div>
                <div class="p-3 text-center border-r border-gray-200">2040</div>
                <div class="p-3 text-center">700</div>
              </div>

              <!-- Row 6 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Salarios pagados en ausentismo
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 163.200.000
                </div>
                <div class="p-3 text-center">$ 56.000.000</div>
              </div>

              <!-- Row 7 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Pérdida de productividad
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 4.973.944.420
                </div>
                <div class="p-3 text-center">$ 1.706.745.634</div>
              </div>

              <!-- Row 8 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Gastos de vacunación
                </div>
                <div class="p-3 text-center border-r border-gray-200">$ 0</div>
                <div class="p-3 text-center">$ 110.000.000</div>
              </div>

              <!-- Row 9 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Pérdidas Operativas
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 5.137.144.420
                </div>
                <div class="p-3 text-center">$ 1.762.745.634</div>
              </div>

              <!-- Row 10 -->
              <div class="grid grid-cols-3 hover:bg-gray-50">
                <div
                  class="p-3 font-medium bg-ochre-influvac/20 border-r border-gray-200"
                >
                  Impacto presupuestal
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 5.137.144.420
                </div>
                <div class="p-3 text-center">$ 1.872.745.634</div>
              </div>

              <!-- Savings Row -->
              <div class="grid grid-cols-3 font-bold">
                <div
                  class="p-3 bg-ochre-influvac/20 border-r border-gray-200 text-center"
                >
                  Ahorro:
                </div>
                <div class="p-3 text-center border-r border-gray-200"></div>
                <div class="p-3 text-center text-green-600">
                  $ 3.264.398.785
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="w-full flex justify-between items-end">
          <div
            class="bg-brown-influvac bg-opacity-90 text-white p-6 rounded-lg shadow-lg max-w-3xl"
          >
            <p class="text-lg leading-relaxed">
              La inversión en vacunación para 2000 trabajadores es de
              $110.000.000, lo que cubre al 40,0% de los colaboradores. Este
              nivel de protección evita que 268 personas se enfermen y reduce en
              1340 el número de "PTE".
            </p>
          </div>
          <div>
            <button
              class="bg-brown-influvac text-white p-2 rounded-lg font-semibold hover:bg-brown-influvac/90 transition-colors view-nav-btn border border-white cursor-pointer"
              data-view="view1"
              data-bg="banner2"
            >
              <BackIcon />
            </button>
          </div>
        </div>
      </div>

      <!-- Vista 3: Costo-Beneficio / Costo-Efectividad -->
      <div id="view3" class="view-content hidden w-full">
        <div class="max-w-3xl">
          <!-- Primera tabla: Costos -->
          <div class="bg-white rounded-lg shadow-lg overflow-hidden mb-4">
            <!-- Table Header -->
            <div class="grid grid-cols-3 bg-blue-influvac text-white font-bold">
              <div class="p-3"></div>
              <div class="p-3 text-center border-r border-white">
                NO VACUNAR
              </div>
              <div class="p-3 text-center">VACUNACIÓN TETRAVALENTE</div>
            </div>

            <!-- Table Rows -->
            <div class="divide-y divide-gray-200">
              <!-- Row 1: Costo de la vacunación -->
              <div class="grid grid-cols-3">
                <div
                  class="p-3 font-medium bg-blue-influvac/20 border-r border-gray-200"
                >
                  Costo de la vacunación
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 0,00
                </div>
                <div class="p-3 text-center">$ 110.000.000</div>
              </div>

              <!-- Row 2: Gasto Total -->
              <div class="grid grid-cols-3">
                <div
                  class="p-3 font-medium bg-blue-influvac/20 border-r border-gray-200"
                >
                  Gasto Total
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 5.137.144.420
                </div>
                <div class="p-3 text-center">$ 1.872.745.634</div>
              </div>

              <!-- Row especial: Relación costo-beneficio -->
              <div class="grid grid-cols-3 bg-blue-influvac/10">
                <div
                  class="col-span-2 p-3 font-bold text-center border-r border-gray-200 text-lg"
                >
                  Relación costo - beneficio
                </div>
                <div class="p-3 text-center font-bold text-lg">30,68</div>
              </div>
            </div>
          </div>

          <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
            <p class="text-lg leading-relaxed text-gray-800">
              <span
                >Por cada <strong>$1</strong> invertido en la vacunación, se ahorran
                <strong>$30,68</strong></span
              > para la empresa.
            </p>
          </div>

          <!-- Segunda tabla: Resultados clínicos -->
          <div class="bg-white rounded-lg shadow-lg overflow-hidden mb-6">
            <!-- Table Header -->
            <div class="grid grid-cols-3 bg-blue-influvac text-white font-bold">
              <div class="p-3"></div>
              <div class="p-3 text-center border-r border-white">
                NO VACUNAR
              </div>
              <div class="p-3 text-center">VACUNACIÓN TETRAVALENTE</div>
            </div>

            <!-- Table Rows -->
            <div class="divide-y divide-gray-200">
              <!-- Row 1: Gasto Total -->
              <div class="grid grid-cols-3">
                <div
                  class="p-3 font-medium bg-blue-influvac/20 border-r border-gray-200"
                >
                  Gasto Total
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  $ 5.137.144.419,73
                </div>
                <div class="p-3 text-center">$ 1.872.745.634,22</div>
              </div>

              <!-- Row 2: Días de incapacidad -->
              <div class="grid grid-cols-3">
                <div
                  class="p-3 font-medium bg-blue-influvac/20 border-r border-gray-200"
                >
                  Días de incapacidad
                </div>
                <div class="p-3 text-center border-r border-gray-200">
                  2.040,00
                </div>
                <div class="p-3 text-center">700,00</div>
              </div>

              <!-- Row especial: ICER -->
              <div class="grid grid-cols-3 bg-blue-influvac/10">
                <div
                  class="col-span-2 p-3 font-bold text-center border-r border-gray-200 text-lg"
                >
                  Relación costo-eficacia incremental (ICER)
                </div>
                <div class="p-3 text-center font-bold text-lg">
                  $ 2.436.118,50
                </div>
              </div>
            </div>
          </div>

          <div class="bg-white p-6 rounded-lg shadow-lg">
            <p class="text-lg leading-relaxed text-gray-800">
              <span
                >Por cada día de incapacidad evitado por la vacunación, se
                obtiene un ahorro de <strong>$2.436.118</strong></span
              >
            </p>
          </div>
        </div>
        <div class="w-full flex justify-end">
          <div>
            <button
              class="bg-brown-influvac text-white p-2 rounded-lg font-semibold hover:bg-brown-influvac/90 transition-colors view-nav-btn border border-white cursor-pointer"
              data-view="view1"
              data-bg="banner2"
            >
              <BackIcon />
            </button>
          </div>
        </div>
      </div>

      <!-- Vista 4: Casos de Influenza -->
      <div id="view4" class="view-content hidden w-full">
        <div class="flex gap-8 items-end ">
          <div class="flex-1 flex flex-col gap-6">
            <!-- Primer título y gráfica -->
            <div class="bg-white rounded-lg shadow-lg p-6 flex-1">
              <h3
                class="text-2xl font-bold text-ochre-influvac mb-4 text-center"
              >
                NO VACUNAR
              </h3>
              <div class="h-full">
                <canvas id="chart-no-vacunar" class="w-full h-full max-h-64"
                ></canvas>
              </div>
            </div>

            <!-- Segundo título y gráfica -->
            <div class="bg-white rounded-lg shadow-lg p-6 flex-1">
              <h3
                class="text-2xl font-bold text-ochre-influvac mb-4 text-center"
              >
                VACUNACIÓN TETRAVALENTE
              </h3>
              <div class="h-full">
                <canvas
                  id="chart-vacunacion-tetravalente"
                  class="w-full h-full max-h-64"></canvas>
              </div>
            </div>
          </div>
          <div>
            <button
              class="bg-ochre-influvac text-white p-2 rounded-lg font-semibold hover:bg-ochre-influvac/90 transition-colors view-nav-btn border border-white cursor-pointer"
              data-view="view1"
              data-bg="banner2"
            >
              <BackIcon />
            </button>
          </div>
        </div>

        <!-- Botón de regreso -->
      </div>
    </section>
  </main>
</Layout>

<script is:inline src="/apps/abbott/costoefectividad-influvac/js/chart.js"
></script>

<script>
  import { URL_BASE } from "@/variables";
  class ViewManager {
    private currentView: string = "view1";
    private formData: any = null;
    private mainContainer: HTMLElement | null = null;
    private chartNoVacunar: any = null;
    private chartVacunacionTetravalente: any = null;
    
    // Referencias a los elementos del formulario
    private form: HTMLFormElement | null = null;
    private numEmpleadosInput: HTMLInputElement | null = null;
    private fecha1VacunacionInput: HTMLInputElement | null = null;
    private numeroDeVacunados1Input: HTMLInputElement | null = null;
    private fecha2VacunacionInput: HTMLInputElement | null = null;
    private numeroDeVacunados2Input: HTMLInputElement | null = null;
    private calculoProductividadSelect: HTMLSelectElement | null = null;
    private ventaNetaInput: HTMLInputElement | null = null;
    private salarioPromedioInput: HTMLInputElement | null = null;
    private precioVacunacionInput: HTMLInputElement | null = null;
    private nivelExposicionSelect: HTMLSelectElement | null = null;
    private diasIncapacidadInput: HTMLInputElement | null = null;
    private productivityDisplay: HTMLElement | null = null;
    
    // Variables por defecto del formulario (nunca cambian)
    private defaultFormVariables = {
      // Parámetros Básicos
      numEmpleados: 5000,
      fecha1Vacunacion: "2025-05-30",
      numeroDeVacunados1: 2000,
      fecha2Vacunacion: '',
      numeroDeVacunados2: 0,
      
      // Parámetros Financieros
      calculoProductividad: "promedio_empresarial",
      ventaNeta: 4388774488000,
      indicadorProductividad: 73146241.47,
      salarioPromedio: 6000000,
      precioVacunacion: 55000,
      
      // Parámetros Operacionales
      nivelExposicion: 2,
      diasIncapacidad: 5
    };
    
    // Variables del formulario (estado actual - se modifica)
    private formVariables = {
      // Parámetros Básicos
      numEmpleados: 5000,
      fecha1Vacunacion: "2025-05-30",
      numeroDeVacunados1: 2000,
      fecha2Vacunacion: '',
      numeroDeVacunados2: 0,
      
      // Parámetros Financieros
      calculoProductividad: "promedio_empresarial",
      ventaNeta: 4388774488000,
      indicadorProductividad: 73146241.47,
      salarioPromedio: 6000000,
      precioVacunacion: 55000,
      
      // Parámetros Operacionales
      nivelExposicion: 2,
      diasIncapacidad: 5
    };

    constructor() {
      this.mainContainer = document.getElementById("main-container");
      this.initializeFormElements();
      this.initializeNavigation();
      this.initializeCustomEvents();
      this.populateFormFromVariables();
      this.initializeFormHandler();
    }

    private initializeFormElements(): void {
      this.form = document.getElementById("modelParametersForm") as HTMLFormElement;
      
      if (this.form) {
        // Parámetros Básicos
        this.numEmpleadosInput = this.form.querySelector('[name="numEmpleados"]') as HTMLInputElement;
        this.fecha1VacunacionInput = this.form.querySelector('[name="fecha1Vacunacion"]') as HTMLInputElement;
        this.numeroDeVacunados1Input = this.form.querySelector('[name="numeroDeVacunados1"]') as HTMLInputElement;
        this.fecha2VacunacionInput = this.form.querySelector('[name="fecha2Vacunacion"]') as HTMLInputElement;
        this.numeroDeVacunados2Input = this.form.querySelector('[name="numeroDeVacunados2"]') as HTMLInputElement;
        
        // Parámetros Financieros
        this.calculoProductividadSelect = this.form.querySelector('[name="calculoProductividad"]') as HTMLSelectElement;
        this.ventaNetaInput = this.form.querySelector('[name="ventaNeta"]') as HTMLInputElement;
        this.salarioPromedioInput = this.form.querySelector('[name="salarioPromedio"]') as HTMLInputElement;
        this.precioVacunacionInput = this.form.querySelector('[name="precioVacunacion"]') as HTMLInputElement;
        
        // Parámetros Operacionales
        this.nivelExposicionSelect = this.form.querySelector('[name="nivelExposicion"]') as HTMLSelectElement;
        this.diasIncapacidadInput = this.form.querySelector('[name="diasIncapacidad"]') as HTMLInputElement;
        
        // Elemento de visualización
        this.productivityDisplay = document.querySelector('#indicadorProductividad div.px-2') as HTMLElement;
      }
    }

    private initializeNavigation(): void {
      const navButtons = document.querySelectorAll(".view-nav-btn");
      navButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          const target = e.target as HTMLButtonElement;
          const viewId = target.getAttribute("data-view");
          const bgImage = target.getAttribute("data-bg");

          if (viewId) {
            this.switchView(viewId, bgImage);
          }
        });
      });
    }

    private initializeFormHandler(): void {
      if (this.form) {
        this.form.addEventListener("submit", (e) => {
          e.preventDefault();
          this.handleFormSubmit();
        });
        
        // Agregar event listeners para actualizar productividad en tiempo real
        this.initializeProductivityUpdaters();
      }
    }

    private initializeProductivityUpdaters(): void {
      // Función auxiliar para limpiar valores numéricos (remover puntos separadores)
      const cleanNumericValue = (value: string): number => {
        return parseInt(value.replace(/\./g, '')) || 0;
      };

      const updateProductivity = () => {
        let indicadorProductividad = 0;
        
        if (this.formVariables.calculoProductividad === "productividad_individual") {
          // Si es productividad individual, el valor es igual al ingresado en ventaNeta
          indicadorProductividad = this.formVariables.ventaNeta;
        } else {
          // Si es promedio empresarial, calcular como antes
          if (this.formVariables.numEmpleados > 0) {
            indicadorProductividad = (this.formVariables.ventaNeta / this.formVariables.numEmpleados) / 12; // 12 meses del año
          }
        }
        
        // Actualizar solo el indicador de productividad
        this.formVariables.indicadorProductividad = indicadorProductividad;
        
        // Actualizar la visualización usando el método centralizado
        this.updateProductivityDisplay();
      };

      // Agregar event listeners a los campos relevantes
      if (this.numEmpleadosInput) {
        this.numEmpleadosInput.addEventListener('input', () => {
          this.formVariables.numEmpleados = cleanNumericValue(this.numEmpleadosInput?.value || '0');
          updateProductivity();
        });
        this.numEmpleadosInput.addEventListener('change', () => {
          this.formVariables.numEmpleados = cleanNumericValue(this.numEmpleadosInput?.value || '0');
          updateProductivity();
        });
      }

      if (this.ventaNetaInput) {
        this.ventaNetaInput.addEventListener('input', () => {
          this.formVariables.ventaNeta = cleanNumericValue(this.ventaNetaInput?.value || '0');
          updateProductivity();
        });
        this.ventaNetaInput.addEventListener('change', () => {
          this.formVariables.ventaNeta = cleanNumericValue(this.ventaNetaInput?.value || '0');
          updateProductivity();
        });
      }

      if (this.calculoProductividadSelect) {
        this.calculoProductividadSelect.addEventListener('change', () => {
          this.formVariables.calculoProductividad = this.calculoProductividadSelect?.value || 'promedio_empresarial';
          updateProductivity();
        });
      }

      // Agregar listeners para otros campos del formulario
      if (this.fecha1VacunacionInput) {
        this.fecha1VacunacionInput.addEventListener('change', () => {
          this.formVariables.fecha1Vacunacion = this.fecha1VacunacionInput?.value || '';
        });
      }

      if (this.numeroDeVacunados1Input) {
        this.numeroDeVacunados1Input.addEventListener('input', () => {
          this.formVariables.numeroDeVacunados1 = cleanNumericValue(this.numeroDeVacunados1Input?.value || '0');
        });
      }

      if (this.fecha2VacunacionInput) {
        this.fecha2VacunacionInput.addEventListener('change', () => {
          this.formVariables.fecha2Vacunacion = this.fecha2VacunacionInput?.value || '';
        });
      }

      if (this.numeroDeVacunados2Input) {
        this.numeroDeVacunados2Input.addEventListener('input', () => {
          this.formVariables.numeroDeVacunados2 = cleanNumericValue(this.numeroDeVacunados2Input?.value || '0');
        });
      }

      if (this.salarioPromedioInput) {
        this.salarioPromedioInput.addEventListener('input', () => {
          this.formVariables.salarioPromedio = cleanNumericValue(this.salarioPromedioInput?.value || '0');
        });
      }

      if (this.precioVacunacionInput) {
        this.precioVacunacionInput.addEventListener('input', () => {
          this.formVariables.precioVacunacion = cleanNumericValue(this.precioVacunacionInput?.value || '0');
        });
      }

      if (this.nivelExposicionSelect) {
        this.nivelExposicionSelect.addEventListener('change', () => {
          this.formVariables.nivelExposicion = parseInt(this.nivelExposicionSelect?.value || '1');
        });
      }

      if (this.diasIncapacidadInput) {
        this.diasIncapacidadInput.addEventListener('input', () => {
          this.formVariables.diasIncapacidad = parseInt(this.diasIncapacidadInput?.value || '0');
        });
      }

      // Llamar una vez para inicializar
      updateProductivity();
    }

    private initializeCustomEvents(): void {
      // Escuchar eventos personalizados del formulario
      document.addEventListener("switchToView", (e: any) => {
        console.log("Cambiando a la vista:", e.detail.viewId);
        const { viewId } = e.detail;
        let bgImage = "banner2"; // default

        // Determinar el fondo basado en la vista
        switch (viewId) {
          case "view2":
            bgImage = "banner3";
            break;
          case "view3":
            bgImage = "banner4";
            break;
          case "view4":
            bgImage = "banner5";
            break;
        }

        this.switchView(viewId, bgImage);
      });

      // Escuchar evento de reset del formulario
      document.addEventListener("formReset", () => {
        console.log("🔄 Formulario reseteado, restaurando valores por defecto...");
        setTimeout(() => {
          this.resetFormToDefaults();
        }, 100); // Pequeño delay para asegurar que el reset se complete
      });
    }

    private populateFormFromVariables(): void {
      // Función auxiliar para formatear números con separadores de miles
      const formatWithThousands = (value: number): string => {
        return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
      };

      // Función auxiliar para formatear fechas para inputs de tipo date
      const formatDateForInput = (dateStr: string): string => {
        if (!dateStr) return '';
        // Si ya está en formato YYYY-MM-DD, devolverlo como está
        if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
          return dateStr;
        }
        // Aquí puedes agregar más lógica de formateo si es necesario
        return dateStr;
      };

      // Verificar que los elementos existan antes de poblarlos
      if (!this.form) return;

      // Poblar campos básicos
      if (this.numEmpleadosInput) {
        this.numEmpleadosInput.value = this.formVariables.numEmpleados.toString();
      }

      if (this.fecha1VacunacionInput) {
        this.fecha1VacunacionInput.value = formatDateForInput(this.formVariables.fecha1Vacunacion);
      }

      if (this.numeroDeVacunados1Input) {
        this.numeroDeVacunados1Input.value = this.formVariables.numeroDeVacunados1.toString();
      }

      if (this.fecha2VacunacionInput) {
        this.fecha2VacunacionInput.value = formatDateForInput(this.formVariables.fecha2Vacunacion);
      }

      if (this.numeroDeVacunados2Input) {
        this.numeroDeVacunados2Input.value = this.formVariables.numeroDeVacunados2.toString();
      }

      // Poblar campos financieros
      if (this.calculoProductividadSelect) {
        this.calculoProductividadSelect.value = this.formVariables.calculoProductividad;
        // Disparar evento change para actualizar la etiqueta
        this.calculoProductividadSelect.dispatchEvent(new Event('change'));
      }

      if (this.ventaNetaInput) {
        this.ventaNetaInput.value = formatWithThousands(this.formVariables.ventaNeta);
      }

      if (this.salarioPromedioInput) {
        this.salarioPromedioInput.value = formatWithThousands(this.formVariables.salarioPromedio);
      }

      if (this.precioVacunacionInput) {
        this.precioVacunacionInput.value = formatWithThousands(this.formVariables.precioVacunacion);
      }

      // Poblar campos operacionales
      if (this.nivelExposicionSelect) {
        this.nivelExposicionSelect.value = this.formVariables.nivelExposicion.toString();
      }

      if (this.diasIncapacidadInput) {
        this.diasIncapacidadInput.value = this.formVariables.diasIncapacidad.toString();
      }

      // Actualizar el indicador de productividad
      this.updateProductivityDisplay();

      console.log('✅ Formulario poblado con valores de formVariables');
    }

    private resetFormToDefaults(): void {
      console.log('🔄 Reseteando formVariables a valores por defecto...');
      
      // Copiar valores por defecto al estado actual
      this.formVariables = {
        ...this.defaultFormVariables
      };
      
      console.log('📝 Estado del formulario reseteado:', this.formVariables);
      
      // Poblar el formulario con los valores reseteados
      this.populateFormFromVariables();
    }

    private updateProductivityDisplay(): void {
      if (this.productivityDisplay) {
        this.productivityDisplay.textContent = this.formVariables.indicadorProductividad.toLocaleString('es-CO', {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        });
      }
    }

    private switchView(viewId: string, bgImage?: string | null): void {
      // Limpiar gráficos si estamos saliendo de la vista 4
      if (this.currentView === "view4") {
        this.cleanupCharts();
      }

      // Hacer scroll suave hacia arriba
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });

      // Cambiar fondo si se especifica
      if (bgImage && this.mainContainer) {
        const urlBase = URL_BASE || "";
        this.mainContainer.style.backgroundImage = `url('${urlBase}/img/bg/${bgImage}.webp')`;
      }

      // Ocultar vista actual
      const currentViewElement = document.getElementById(this.currentView);
      if (currentViewElement) {
        currentViewElement.classList.add("hidden");
        currentViewElement.classList.remove("active");
      }

      // Mostrar nueva vista
      const newViewElement = document.getElementById(viewId);
      if (newViewElement) {
        newViewElement.classList.remove("hidden");
        newViewElement.classList.add("active");
      }

      // Actualizar vista actual
      this.currentView = viewId;

      this.updateLogo(viewId);

      // Cargar contenido específico de la vista si es necesario
      this.loadViewContent(viewId);
    }

    private handleFormSubmit(): void {
      // Asegurar que los valores finales estén sincronizados
      this.extractFormValues();
      
      // Realizar cálculos
      this.calculateResults();

      // No cambiar de vista automáticamente, dejar que el usuario elija
      console.log("Formulario procesado. Datos listos para visualización.");
    }

    private extractFormValues(): void {
      // Las variables ya se actualizan en tiempo real con los event listeners
      // Solo necesitamos asegurar que el indicador de productividad esté actualizado
      if (this.formVariables.calculoProductividad === "productividad_individual") {
        this.formVariables.indicadorProductividad = this.formVariables.ventaNeta;
      } else {
        this.formVariables.indicadorProductividad = this.formVariables.numEmpleados > 0 
          ? (this.formVariables.ventaNeta / this.formVariables.numEmpleados) / 12
          : 0;
      }
      
      console.log('📊 Variables del formulario actualizadas:', this.formVariables);
    }

    private calculateResults(): void {
      console.log('🔄 Iniciando cálculos con las variables del formulario...');
      
      // Usar las variables del formulario para los cálculos
      const totalVacunados = this.formVariables.numeroDeVacunados1 + this.formVariables.numeroDeVacunados2;
      const porcentajeVacunacion = (totalVacunados / this.formVariables.numEmpleados) * 100;
      const costoTotalVacunacion = totalVacunados * this.formVariables.precioVacunacion;
      
      console.log('📊 Cálculos realizados:');
      console.log(`  • Total de Vacunados: ${totalVacunados.toLocaleString('es-CO')}`);
      console.log(`  • Porcentaje de Vacunación: ${porcentajeVacunacion.toFixed(2)}%`);
      console.log(`  • Costo Total de Vacunación: $${costoTotalVacunacion.toLocaleString('es-CO')}`);
      
      // Simular cálculos más complejos - aquí integrarías tu lógica de cálculo real
      setTimeout(() => {
        // Resultados para Vista 2 (Impacto Presupuestal)
        const ahorroTotal = document.getElementById("resultado-ahorro-total");
        const roi = document.getElementById("resultado-roi");
        if (ahorroTotal) ahorroTotal.textContent = `$${(costoTotalVacunacion * 2.5).toLocaleString('es-CO')}`;
        if (roi) roi.textContent = "320%";

        // Resultados para Vista 3 (Costo-Beneficio)
        const costoBeneficio = document.getElementById(
          "resultado-costo-beneficio"
        );
        const costoCasoEvitado = document.getElementById(
          "resultado-costo-caso-evitado"
        );
        const efectividad = document.getElementById("resultado-efectividad");
        if (costoBeneficio) costoBeneficio.textContent = "3.2:1";
        if (costoCasoEvitado) costoCasoEvitado.textContent = `$${(costoTotalVacunacion / Math.max(totalVacunados * 0.1, 1)).toLocaleString('es-CO')}`;
        if (efectividad) efectividad.textContent = "85%";

        // Resultados para Vista 4 (Casos)
        const casosH1N1 = document.getElementById("casos-h1n1");
        const casosH3N2 = document.getElementById("casos-h3n2");
        const casosBVictoria = document.getElementById("casos-b-victoria");
        const casosBYamagata = document.getElementById("casos-b-yamagata");
        
        // Calcular casos basados en el nivel de exposición y número de empleados
        const factorExposicion = this.formVariables.nivelExposicion;
        const baseCase = Math.round((this.formVariables.numEmpleados - totalVacunados) * 0.01 * factorExposicion);
        
        if (casosH1N1) casosH1N1.textContent = Math.round(baseCase * 1.2).toString();
        if (casosH3N2) casosH3N2.textContent = Math.round(baseCase * 1.0).toString();
        if (casosBVictoria) casosBVictoria.textContent = Math.round(baseCase * 0.8).toString();
        if (casosBYamagata) casosBYamagata.textContent = Math.round(baseCase * 0.9).toString();
        
        console.log('✅ Cálculos completados y resultados actualizados en las vistas.');
      }, 500);
    }

    private loadViewContent(viewId: string): void {
      // Mostrar las variables actuales cuando se carga una vista
      if (this.formVariables.numEmpleados > 0) {
        console.log(`🔄 Cargando contenido para ${viewId} con variables actualizadas:`);
        console.log(`  • Empleados: ${this.formVariables.numEmpleados.toLocaleString('es-CO')}`);
        console.log(`  • Total Vacunados: ${(this.formVariables.numeroDeVacunados1 + this.formVariables.numeroDeVacunados2).toLocaleString('es-CO')}`);
        console.log(`  • Costo Total: $${((this.formVariables.numeroDeVacunados1 + this.formVariables.numeroDeVacunados2) * this.formVariables.precioVacunacion).toLocaleString('es-CO')}`);
      }
      
      switch (viewId) {
        case "view3":
          this.loadChartsView3();
          break;
        case "view4":
          this.loadChartsView4();
          break;
      }
    }

    private loadChartsView3(): void {
      // Cargar gráficos para vista de Costo-Beneficio
      const chartTemporal = document.getElementById("chart-temporal");
      if (chartTemporal) {
        chartTemporal.innerHTML =
          '<p class="text-center text-sm text-gray-500">Análisis temporal cargado</p>';
      }
    }

    private loadChartsView4(): void {
      // Cargar gráficos para vista de Casos
      // Esperar a que Chart.js esté disponible
      const checkChart = () => {
        if (typeof (window as any).Chart !== "undefined") {
          this.createInfluenzaCharts();
        } else {
          setTimeout(checkChart, 100);
        }
      };
      checkChart();
    }

    private cleanupCharts(): void {
      // Destruir gráficos existentes para evitar memory leaks
      if (this.chartNoVacunar) {
        this.chartNoVacunar.destroy();
        this.chartNoVacunar = null;
      }
      if (this.chartVacunacionTetravalente) {
        this.chartVacunacionTetravalente.destroy();
        this.chartVacunacionTetravalente = null;
      }
    }

    private createInfluenzaCharts(): void {
      // Destruir gráficos existentes si los hay
      if (this.chartNoVacunar) {
        this.chartNoVacunar.destroy();
        this.chartNoVacunar = null;
      }
      if (this.chartVacunacionTetravalente) {
        this.chartVacunacionTetravalente.destroy();
        this.chartVacunacionTetravalente = null;
      }

      // Generar datos para 365 días
      const days = Array.from({ length: 365 }, (_, i) => i + 1);

      // Datos simulados para diferentes cepas de influenza
      const activosData = days.map((day) =>
        Math.max(0, Math.sin(day * 0.02) * 15 + Math.random() * 5)
      );
      const ah1n1Data = days.map((day) =>
        Math.max(0, Math.sin(day * 0.015) * 12 + Math.random() * 3)
      );
      const ah3n2Data = days.map((day) =>
        Math.max(0, Math.sin(day * 0.025) * 10 + Math.random() * 4)
      );
      const victoriaData = days.map((day) =>
        Math.max(0, Math.sin(day * 0.018) * 8 + Math.random() * 2)
      );
      const yamagataData = days.map((day) =>
        Math.max(0, Math.sin(day * 0.022) * 6 + Math.random() * 3)
      );

      // Datos para sin vacunar (valores más altos)
      const noVacunarData = {
        activos: activosData.map((val) => val * 2.5),
        ah1n1: ah1n1Data.map((val) => val * 2.2),
        ah3n2: ah3n2Data.map((val) => val * 2.8),
        victoria: victoriaData.map((val) => val * 2.3),
        yamagata: yamagataData.map((val) => val * 2.6),
      };

      // Datos para vacunación (valores reducidos)
      const vacunacionData = {
        activos: activosData.map((val) => val * 0.8),
        ah1n1: ah1n1Data.map((val) => val * 0.7),
        ah3n2: ah3n2Data.map((val) => val * 0.9),
        victoria: victoriaData.map((val) => val * 0.6),
        yamagata: yamagataData.map((val) => val * 0.8),
      };

      // Configuración común para ambas gráficas
      const commonOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "bottom" as const,
            labels: {
              usePointStyle: true,
              padding: 15,
              font: {
                size: 11,
              },
            },
          },
        },
        scales: {
          x: {
            title: {
              display: true,
              text: "Días del año",
              font: {
                size: 12,
                weight: "bold",
              },
            },
            ticks: {
              maxTicksLimit: 12,
            },
          },
          y: {
            title: {
              display: true,
              text: "Número de casos",
              font: {
                size: 12,
                weight: "bold",
              },
            },
            beginAtZero: true,
          },
        },
      };

      // Crear gráfica "No Vacunar"
      const ctx1 = document.getElementById(
        "chart-no-vacunar"
      ) as HTMLCanvasElement;
      if (ctx1) {
        this.chartNoVacunar = new (window as any).Chart(ctx1, {
          type: "line",
          data: {
            labels: days,
            datasets: [
              {
                label: "Activos",
                data: noVacunarData.activos,
                borderColor: "#FF6B6B",
                backgroundColor: "#FF6B6B20",
                tension: 0.3,
                fill: true,
              },
              {
                label: "AH1N1",
                data: noVacunarData.ah1n1,
                borderColor: "#4ECDC4",
                backgroundColor: "#4ECDC420",
                tension: 0.3,
                fill: true,
              },
              {
                label: "AH3N2",
                data: noVacunarData.ah3n2,
                borderColor: "#45B7D1",
                backgroundColor: "#45B7D120",
                tension: 0.3,
                fill: true,
              },
              {
                label: "Victoria",
                data: noVacunarData.victoria,
                borderColor: "#F7DC6F",
                backgroundColor: "#F7DC6F20",
                tension: 0.3,
                fill: true,
              },
              {
                label: "Yamagata",
                data: noVacunarData.yamagata,
                borderColor: "#BB8FCE",
                backgroundColor: "#BB8FCE20",
                tension: 0.3,
                fill: true,
              },
              {
                label: "No Vacunal",
                data: days.map(() => 0), // Sin datos para esta serie en "No Vacunar"
                borderColor: "#E8E8E8",
                backgroundColor: "#E8E8E820",
                tension: 0.3,
                fill: true,
              },
            ],
          },
          options: commonOptions,
        });
      }

      // Crear gráfica "Vacunación Tetravalente"
      const ctx2 = document.getElementById(
        "chart-vacunacion-tetravalente"
      ) as HTMLCanvasElement;
      if (ctx2) {
        this.chartVacunacionTetravalente = new (window as any).Chart(ctx2, {
          type: "line",
          data: {
            labels: days,
            datasets: [
              {
                label: "Activos",
                data: vacunacionData.activos,
                borderColor: "#FF6B6B",
                backgroundColor: "#FF6B6B20",
                tension: 0.3,
                fill: true,
              },
              {
                label: "AH1N1",
                data: vacunacionData.ah1n1,
                borderColor: "#4ECDC4",
                backgroundColor: "#4ECDC420",
                tension: 0.3,
                fill: true,
              },
              {
                label: "AH3N2",
                data: vacunacionData.ah3n2,
                borderColor: "#45B7D1",
                backgroundColor: "#45B7D120",
                tension: 0.3,
                fill: true,
              },
              {
                label: "Victoria",
                data: vacunacionData.victoria,
                borderColor: "#F7DC6F",
                backgroundColor: "#F7DC6F20",
                tension: 0.3,
                fill: true,
              },
              {
                label: "Yamagata",
                data: vacunacionData.yamagata,
                borderColor: "#BB8FCE",
                backgroundColor: "#BB8FCE20",
                tension: 0.3,
                fill: true,
              },
              {
                label: "No Vacunal",
                data: days.map(() => Math.random() * 2), // Datos mínimos para población no vacunada
                borderColor: "#E8E8E8",
                backgroundColor: "#E8E8E820",
                tension: 0.3,
                fill: true,
              },
            ],
          },
          options: commonOptions,
        });
      }
    }

    private updateLogo(currentView: string): void {
      const logo = document.getElementById("dynamic-logo") as HTMLImageElement;
      if (!logo) return;

      const whiteLogo = logo.getAttribute("data-white-logo");
      const colorLogo = logo.getAttribute("data-color-logo");

      if (!whiteLogo || !colorLogo) return;

      // Vista 1: logo blanco, Vistas 2, 3, 4: logo de color
      if (currentView === "view1" || currentView === "view4") {
        logo.src = whiteLogo;
      } else {
        logo.src = colorLogo;
      }
    }
  }
  
  document.addEventListener("DOMContentLoaded", () => {
    new ViewManager();
  });
</script>

<style>
  .view-content {
    transition: opacity 0.3s ease-in-out;
  }

  .view-content.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .view-content.active {
    opacity: 1;
    pointer-events: auto;
  }

  .view-nav-btn {
    transition: all 0.3s ease;
  }
</style>
